package mouseOperation;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class MouseOperationGlobalsqa {
	//creating static variable "driver", as it is used for all methods.
	static WebDriver driver;
	static Actions action;//as action variable required in all mouse operation hence making it static so that all method can use directly.
	public static void main(String[] args) {
	
	setUp("https://www.globalsqa.com/demo-site/");
	
	//creating instance of Actions class	
//	Actions action=new Actions(driver);
	////Identifying element to right click and calling method to right click
	WebElement ebooks=driver.findElement(By.linkText("FREE EBOOKS"));
//	action.moveToElement(ebooks).perform();
	MouseOperationGlobalsqa.action= new Actions(driver);//creating Actions class instance and we can use static varibale with class name or also by directly.
	mouseOverAction(ebooks);
	//Identifying element to right click and calling method to right click
	WebElement cheatSheets=driver.findElement(By.linkText("CHEATSHEETS"));
	mouseRightClick(cheatSheets);
	//identifying drag and drop element
	setUp("https://www.w3schools.com/html/html5_draganddrop.asp");
	WebElement dragDropSource=driver.findElement(By.id("div1"));
	WebElement dragDropTarget=driver.findElement(By.id("div2"));
	dragDrop(dragDropSource, dragDropTarget);
	}
	public static void setUp(String appUrl) {
	driver=new ChromeDriver();
	driver.get(appUrl);
	driver.manage().window().maximize();
	driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
	}
	
	public static void mouseOverAction(WebElement webelement) {
	//creating instance of Actions class	
	action.moveToElement(webelement).perform();
	}
	
	public static void mouseRightClick(WebElement webelement) {
	action.contextClick(webelement).perform();
	}
	
	public static void dragDrop(WebElement source,WebElement target) {
	action.clickAndHold(source).moveToElement(target).build().perform();
	
	}
	
	
}
